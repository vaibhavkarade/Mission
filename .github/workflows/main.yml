name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  compile:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: '17'

      - name: Compile
        run: mvn compile -DskipTests=true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compiled-artifacts
          path: target/
  scan:
    runs-on: self-hosted
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          output-format: 'table'
          output: 'trivy-fs-report.html'

      - name: Upload Trivy report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy-fs-report.html
  # sonarqube:
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # - name: Set up JDK 17
  #     #   uses: actions/setup-java@v3
  #     #   with:
  #     #     java-version: '17'
  #     - name: Install unzip
  #       run: sudo apt-get update && sudo apt-get install -y unzip
  #     - name: Install SonarQube Scanner
  #       run: |
  #         curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
  #         unzip sonar-scanner.zip
  #         mv sonar-scanner-4.6.2.2472-linux sonar-scanner
      # - name: Build and analyze with SonarQube
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      


      # - name: SonarQube Scan
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     sonar-scanner \
      #       -Dsonar.projectKey=mission \
      #       -Dsonar.sources=. \
      #       -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  package:
    runs-on: self-hosted
    needs: scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: '17'

      - name: Package
        run: mvn package -DskipTests=true

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: packaged-artifacts
          path: target/
  # build_and_push:
  #   runs-on: self-hosted
  #   needs: package
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Download packaged artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: packaged-artifacts
  #         path: target/

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Docker Hub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username --password-stdin "${{ secrets.DOCKER_USERNAME }}" 

  #     - name: Build and push Docker image
  #       run: |
  #         docker build -t vaibhavkarade/mission2:latest .
  #         docker push vaibhavkarade/mission2:latest

  #     - name: Deploy to container
  #       run: |
  #         docker run -d -p 8080:8080 --name mission vaibhavkarade/mission2:latest
  build_and_push:
    runs-on: self-hosted
    needs: package
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      
      - name: Download packaged artifacts
        uses: actions/download-artifact@v3
        with:
          name: packaged-artifacts
          path: target/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker build and push
        run: |
          #run commands to build and push docker images
          docker build -t mission2 .
          docker tag mission2 vaibhavkarade/mission2:latest
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }}  -p --password-stdin ${{ secrets.DOCKERHUB_PASSWORD }} 
          docker push vaibhavkarade/mission2:latest
        env:
          DOCKER_CLI_ACI: 1


  #     # - name: Login to Docker Hub
  #     #   uses: docker/login-action@v3
  #     #   with:
  #     #     username: ${{ secrets.DOCKER_USERNAME }}
  #     #     password: ${{ secrets.DOCKER_PASSWORD }}

  #     # - name: Login to Docker Hub
  #     #   run: |
  #     #     docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          

  #     # - name: Build and push Docker image
  #     #   run: |
  #     #     docker build -t vaibhavkarade/mission2:latest .
  #     #     docker push vaibhavkarade/mission2:latest

  #     # - name: deploy to container
  #     #   run: |
  #     #     docker run -d -p 8080:8080 --name mission vaibhavkarade/mission2:latest




